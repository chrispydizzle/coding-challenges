namespace CodeChallenges
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Sorts;

    internal static class Program
    {
        public static void Main(string[] args)
        {
            // var res = new[] {0, 0, 3, 2, 3, 2, 0, 2, 3, 2, 2, 2, 3, 2, 3, 3, 0, 3, 2, 2, 0, 0, 0, 3, 0, 3, 0, 2, 0, 1, 3, 2, 2, 2, 2, 1, 0, 2, 2, 1, 3, 3, 3, 3, 2, 0, 2, 2, 0, 2, 2, 1, 3, 3, 1, 3, 0, 3, 2, 0, 0, 3, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 3, 0, 0, 1, 2, 3, 0, 2, 2, 2, 2, 2, 2, 3, 2, 2, 0, 2, 3, 2, 0, 0, 0, 1, 0, 2, 2, 2, 2, 2, 3, 0, 0, 2, 0, 0, 3, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 0, 0, 2, 2, 0, 3, 2, 2, 2, 0, 3, 0, 2, 2, 3, 0, 2, 2, 2, 3, 1, 3, 2, 3, 2, 2, 0, 2, 1, 2, 0, 1, 0, 3, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 0, 2, 1, 2, 2, 2, 2, 3, 0, 0, 0, 0, 2, 0, 2, 3, 2, 3, 0, 0, 3, 0, 3, 0, 0, 0, 2, 3, 0, 3, 2, 0, 0, 0, 2, 2, 1, 3, 2, 3, 2, 3, 2, 0, 2, 2, 0, 2, 3, 0, 3, 2, 3, 2, 2, 3, 3, 0, 0, 2, 2, 2, 3, 0, 2, 3, 3, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2, 2, 2, 2, 3, 3, 0, 3, 3, 0, 2, 2, 2, 3, 2, 0, 2, 0, 0, 3, 3, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 2, 3, 2, 3, 0, 2, 2, 2, 0, 2, 2, 2, 3, 0, 0, 2, 0, 2, 3, 3, 0, 2, 3, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 2, 1, 0, 2, 2, 3, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 3, 0, 3, 2, 2, 2, 3, 3, 0, 2, 2, 2, 2, 2, 2, 0, 1, 2, 2, 3, 3, 2, 3, 3, 3, 2, 0, 0, 3, 3, 3, 3, 3, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 3, 3, 1, 2, 0, 0, 1, 2, 2, 0, 3, 2, 0, 2, 2, 3, 0, 2, 3, 2, 2, 0, 0, 3, 2, 2, 3, 2, 0, 3, 2, 0, 3, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 0, 0, 0, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 3, 2, 0, 2, 2, 2, 3, 2, 2, 2, 0, 2, 2, 3, 2, 0, 3, 2, 1, 0, 2, 2, 3, 3, 0, 2, 2, 1, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 2, 1, 3, 0, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 2, 0, 0, 3, 2, 3, 0, 2, 3, 2, 3, 0, 3, 3, 0, 0, 2, 0, 3, 3, 2, 2, 3, 0, 2, 2, 0, 0, 2, 0, 0, 2, 2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 3, 3, 2, 2, 2, 2, 3, 3, 2, 0, 3, 0, 2, 3, 2, 3, 0, 0, 2, 3, 3, 2, 2, 2, 3, 1, 0, 2, 3, 1, 2, 2, 2, 2, 3, 0, 2, 0, 3, 2, 2, 2, 2, 3, 2, 1, 1, 3, 3, 2, 0, 2, 2, 1, 0, 0, 2, 3, 2, 0, 2, 0, 3, 2, 2, 2, 2, 3, 0, 1, 2, 0, 0, 2, 2, 2, 0, 2, 0, 2, 3, 0, 2, 2, 0, 0, 3, 2, 1, 2, 2, 2, 2, 2, 3, 0, 2, 0, 2, 0, 3, 2, 2, 2, 0, 0, 2, 0, 2, 2, 3, 3, 3, 0, 0, 1, 2, 2, 0, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 3, 2, 2, 2, 0, 1, 0, 2, 2, 3, 2, 2, 3, 2, 0, 2, 2, 2, 3, 2, 2, 2, 3, 2, 1, 3, 2, 2, 3, 2, 0, 3, 2, 2, 0, 2, 2, 2, 2, 1, 0, 3, 3, 0, 0, 2, 3, 0, 2, 3, 0, 2, 3, 2, 2, 0, 2, 3, 0, 0, 3, 2, 2, 3, 2, 2, 0, 0, 2, 2, 3, 2, 2, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 0, 2, 2, 0, 0, 0, 3, 0, 2, 2, 1, 2, 2, 0, 0, 2, 2, 2, 2, 2, 3, 3, 2, 2, 0, 3, 2, 2, 2, 0, 2, 3, 2, 3, 2, 1, 0, 2, 3, 3, 2, 2, 1, 0, 0, 1, 1, 3, 2, 1, 0, 3, 2, 3, 0, 0, 1, 0, 3, 2, 2, 2, 1, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 0, 2, 0, 1, 3, 2, 2, 3, 2, 3, 2, 2, 3, 2, 2, 3, 0, 2, 2, 0, 2, 1, 3, 2, 2, 2, 2, 0, 3, 3, 2, 0, 2, 3, 3, 2, 0, 2, 0, 3, 3, 2, 2, 2, 0, 2, 3, 3, 0, 2, 1, 0, 1, 2, 2, 3, 3, 2, 2, 1, 2, 2, 0, 2, 2, 2, 0, 3, 2, 2, 3, 1, 2, 2, 0, 3, 2, 2, 0, 3, 2, 3, 0, 0, 2, 1, 3, 3, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 3, 2, 2, 0, 1, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 0, 0, 0, 2, 0, 1, 2, 3, 2, 0, 3, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 3, 0, 2, 3, 2, 1};
            int[] exp = {0, 3, 2, 2, 2, 2, 1, 2, 0, 2, 2, 0, 3, 2, 0, 0, 2, 2, 4, 3, 1, 2, 0, 2, 2, 3, 1, 2, 4, 2, 3, 3, 3, 0, 1, 2, 2, 3, 4, 2, 3, 1, 2, 3, 4, 2, 0, 2, 0, 0, 4, 2, 3, 2, 2, 0, 0, 1, 2, 2, 2, 0, 2, 2, 2, 2, 4, 2, 2, 3, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 3, 0, 2, 4, 1, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 3, 0, 2, 3, 4, 3, 2, 3, 3, 2, 4, 4, 2, 2, 2, 0, 3, 2, 3, 3, 2, 2, 3, 0, 2, 0, 0, 3, 2, 3, 2, 3, 2, 2, 0, 0, 3, 2, 1, 0, 2, 0, 0, 0, 3, 3, 2, 0, 2, 0, 2, 4, 2, 2, 2, 3, 2, 0, 0, 2, 0, 0, 1, 3, 3, 4, 2, 3, 0, 3, 1, 2, 0, 2, 1, 4, 3, 3, 2, 3, 0, 4, 0, 3, 0, 3, 0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 3, 0, 2, 2, 4, 2, 0, 1, 2, 2, 1, 2, 2, 3, 1, 3, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 0, 3, 2, 2, 2, 3, 2, 3, 0, 2, 0, 2, 4, 2, 2, 0, 2, 2, 2, 3, 2, 2, 2, 2, 4, 2, 3, 3, 0, 3, 4, 2, 3, 2, 1, 4, 0, 2, 0, 1, 1, 3, 3, 0, 1, 2, 2, 1, 0, 3, 2, 0, 2, 0, 2, 2, 0, 1, 2, 3, 1, 3, 0, 3, 1, 0, 0, 0, 3, 0, 1, 2, 3, 3, 3, 0, 2, 4, 0, 2, 0, 3, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 0, 2, 2, 0, 2, 4, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 3, 0, 3, 2, 2, 3, 2, 3, 2, 3, 3, 3, 2, 2, 3, 0, 0, 3, 2, 1, 2, 2, 2, 0, 2, 0, 3, 2, 4, 0, 2, 0, 0, 3, 2, 2, 2, 2, 3, 2, 0, 3, 3, 2, 2, 3, 2, 2, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 2, 0, 3, 2, 2, 0, 3, 2, 0, 2, 3, 0, 0, 2, 0, 1, 2, 0, 4, 2, 3, 4, 2, 3, 2, 4, 2, 0, 2, 4, 2, 3, 0, 0, 2, 2, 2, 1, 0, 3, 2, 2, 2, 2, 1, 0, 0, 3, 2, 0, 3, 2, 1, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 4, 3, 3, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 0, 3, 2, 1, 3, 0, 0, 2, 3, 2, 2, 2, 3, 2, 1, 3, 2, 2, 0, 4, 2, 0, 1, 3, 3, 2, 0, 2, 1, 2, 4, 2, 0, 0, 2, 4, 0, 3, 2, 2, 3, 0, 2, 3, 2, 0, 3, 0, 0, 2, 3, 0, 0, 2, 1, 2, 2, 0, 2, 2, 2, 3, 1, 2, 2, 2, 2, 3, 2, 2, 3, 2, 4, 4, 2, 2, 4, 3, 2, 0, 3, 2, 3, 3, 2, 0, 2, 2, 2, 3, 3, 0, 0, 0, 2, 0, 3, 2, 3, 3, 2, 0, 0, 4, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2, 0, 0, 2, 3, 2, 0, 3, 2, 2, 3, 0, 3, 3, 2, 2, 2, 3, 2, 2, 4, 0, 2, 2, 2, 3, 0, 3, 0, 0, 2, 0, 2, 0, 2, 3, 2, 3, 3, 3, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 0, 2, 0, 2, 2, 2, 2, 4, 3, 2, 4, 2, 3, 2, 0, 4, 2, 0, 2, 2, 1, 3, 2, 2, 0, 3, 3, 3, 2, 0, 0, 0, 1, 0, 2, 2, 0, 4, 2, 1, 0, 2, 4, 0, 2, 2, 2, 3, 2, 2, 0, 2, 2, 0, 2, 2, 2, 3, 2, 0, 3, 2, 3, 0, 1, 2, 2, 1, 4, 1, 4, 0, 2, 2, 0, 2, 0, 2, 0, 2, 3, 0, 0, 0, 0, 3, 0, 2, 0, 0, 3, 3, 3, 0, 4, 2, 2, 2, 2, 2, 0, 3, 3, 1, 3, 3, 3, 0, 0, 3, 2, 3, 3, 2, 3, 2, 0, 2, 2, 0, 3, 2, 0, 0, 0, 3, 0, 2, 2, 2, 0, 2, 0, 2, 1, 2, 4, 1, 2, 0, 3, 2, 2, 4, 2, 2, 3, 3, 0, 0, 3, 0, 3, 0, 3, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 0, 2, 2, 2, 2, 2, 2, 1, 2, 2, 4, 2, 2, 2, 3, 3, 0, 2, 3, 2, 0, 3, 2, 2, 3, 0, 2, 2, 0, 2, 3, 0, 0, 2, 0, 2, 2, 2, 0, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 2, 2, 2, 3, 2, 0, 2, 3, 3, 3, 0, 3, 3, 2, 2, 0, 2, 2, 2, 4, 2, 0, 2, 3, 0, 2, 2, 2, 2, 2, 3, 2, 0, 2, 0, 2, 0, 3, 3, 2, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 2, 0, 2, 3, 0, 2, 3, 4, 2, 3, 2, 2, 2, 2, 0, 4, 2, 2, 2, 3, 0, 2, 0, 0, 3, 2, 2, 3, 2, 0, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 0, 2, 2, 0, 2, 3, 2, 2, 0, 1, 3, 0, 3, 4, 0, 1, 3, 0, 1, 2, 4, 2, 0, 0, 0, 3, 3, 3, 1, 2, 2, 2, 0, 0, 2, 0, 3, 0, 3, 2, 2};
            List<int> res = new List<int>();
            RandomPickWithWeight2 s = new RandomPickWithWeight2(new[] {5, 1, 9, 4, 1});
            List<int> enumerable = exp.Distinct().ToList();
            enumerable.Sort();

            bool kg = true;
            List<int> expCount = new List<int>();
            double[] expCt = new double[enumerable.Count];
            foreach (int i in enumerable)
            {
                int count = exp.Count(z => z == i);

                expCount.Add(count);
                expCt[i] = count / (double) exp.Length * 100;
            }

            int seed = int.MinValue + 1;
            int counter = 0;
            while (kg)
            {
                counter++;
                while (res.Count < exp.Length) res.Add(s.PickIndex());


                StringBuilder b = new StringBuilder();
                StringBuilder b2 = new StringBuilder();
                foreach (int i in enumerable)
                {
                    int count = res.Count(z => z == i);
                    double pct = count / (double) exp.Length * 100;

                    b.Append($"exp: {i} {count} ({pct})| ");
                    b2.Append($"exp: {i} {expCount[i]} ({expCt[i]})| ");
                }

                Console.WriteLine(b);
                Console.WriteLine(b2);

                if (counter >= 10000)
                {
                    Console.WriteLine(b);
                    Console.WriteLine(b2);
                    string input = Console.ReadLine();
                    counter = 0;
                }

                /*if (input != string.Empty)
                {
                    kg = false;
                }*/

                if (b.ToString() == b2.ToString())
                {
                    // Console.WriteLine(s.seed);
                    Console.ReadLine();
                    kg = false;
                }

                res.Clear();
                // s = new RandomPickWithWeight(++seed, new[] {5, 1, 9, 4, 1});
                // s.IncSeed();
            }
        }

        public static void TMain(string[] args)
        {
            RandomPickWithWeight s = new RandomPickWithWeight(new[] {3, 14, 1, 7});
            int counter = 0;
            while (counter < 100)
            {
                W(s.PickIndex());
                counter++;
            }
        }

        private static void W(object o)
        {
            if (o is IEnumerable enumerable && !(o is string s))
                foreach (object v in enumerable)
                    Console.Write($"{v},");

            Console.WriteLine($" Raw object: {o}");
        }
    }
}